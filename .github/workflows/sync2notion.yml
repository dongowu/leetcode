name: Sync to Notion

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      sync_type:
        description: 'Sync type (full or partial)'
        required: true
        default: 'partial'
        type: choice
        options:
          - full
          - partial

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Info
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "Vercel URL: ${{ secrets.VERCEL_SYNC_URL }}"
          echo "Notion Token exists: ${{ secrets.NOTION_TOKEN != '' }}"
          echo "Sync type: ${{ github.event.inputs.sync_type || 'partial' }}"

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get files to sync
        id: changed-files
        if: github.event.inputs.sync_type != 'full'
        uses: tj-actions/changed-files@v39
        with:
          files: |
            **/*.md
            **/*.py
            **/*.js
            **/*.ts
            **/*.jsx
            **/*.tsx

      - name: Get all files
        id: all-files
        if: github.event.inputs.sync_type == 'full'
        run: |
          find . -type f \( -name "*.md" -o -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" \) | sed 's|^\./||' > files.txt

      - name: Debug Files
        run: |
          if [ "${{ github.event.inputs.sync_type }}" = "full" ]; then
            echo "Syncing all files"
            echo "Files to sync:"
            cat files.txt
          else
            echo "Syncing changed files"
            echo "Any files changed: ${{ steps.changed-files.outputs.any_changed }}"
            echo "Changed files: ${{ steps.changed-files.outputs.all_changed_files }}"
          fi

      - name: Test Vercel Service
        run: |
          echo "Testing Vercel service connection..."
          # 测试 GET 请求
          curl -v "${{ secrets.VERCEL_SYNC_URL }}" || true
          # 测试 OPTIONS 请求
          curl -v -X OPTIONS "${{ secrets.VERCEL_SYNC_URL }}" || true
          # 测试 POST 请求
          curl -v -X POST "${{ secrets.VERCEL_SYNC_URL }}" \
            -H "Content-Type: application/json" \
            -d '{"test": "test"}' || true

      - name: Sync files to Notion
        run: |
          # 检查必要的环境变量
          if [ -z "${{ secrets.VERCEL_SYNC_URL }}" ]; then
            echo "Error: VERCEL_SYNC_URL is not set"
            exit 1
          fi
          
          if [ -z "${{ secrets.NOTION_TOKEN }}" ]; then
            echo "Error: NOTION_TOKEN is not set"
            exit 1
          fi

          # 同步函数
          sync_file() {
            local file="$1"
            if [ -f "$file" ]; then
              echo "Processing file: $file"
              content=$(cat "$file" | base64 -w 0)
              echo "Sending request to: ${{ secrets.VERCEL_SYNC_URL }}"
              
              # 构建请求数据
              request_data="{
                \"notion_token\": \"${{ secrets.NOTION_TOKEN }}\",
                \"github_token\": \"${{ secrets.GITHUB_TOKEN }}\",
                \"repo_name\": \"${{ github.repository }}\",
                \"file_path\": \"$file\",
                \"content\": \"$content\",
                \"file_pattern\": \"**/*.{md,py,js,ts,jsx,tsx}\"
              }"
              
              echo "Request data: $request_data"
              
              # 发送请求
              response=$(curl -v -s -w "\n%{http_code}" -X POST "${{ secrets.VERCEL_SYNC_URL }}" \
                -H "Content-Type: application/json" \
                -H "User-Agent: GitHub-Actions" \
                -d "$request_data")
              
              status_code=$(echo "$response" | tail -n1)
              body=$(echo "$response" | sed '$d')
              
              echo "Response status: $status_code"
              echo "Response body: $body"
              
              if [ "$status_code" != "200" ]; then
                echo "Error syncing file $file"
                return 1
              fi
            fi
            return 0
          }

          # 根据同步类型处理文件
          if [ "${{ github.event.inputs.sync_type }}" = "full" ]; then
            while IFS= read -r file; do
              sync_file "$file" || exit 1
            done < files.txt
          else
            for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
              sync_file "$file" || exit 1
            done
          fi 